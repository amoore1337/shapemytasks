fragment ScopeFragment on Scope {
  id
  title
  progress
  color
  projectId
  position
  closedAt
  niceToHave
  createdAt
  updatedAt
  flag {
    id
    message
    createdBy {
      id
      name
      email
      updatedAt
      createdAt
    }
    createdAt
    updatedAt
  }
}

mutation CreateScope($title: String!, $description: String, $color: String, $projectId: ID!) {
  createScope(title: $title, description: $description, color: $color, projectId: $projectId) {
    ...ScopeFragment
  }
}

mutation UpdateScope($id: ID!, $title: String, $description: String, $niceToHave: Boolean, $color: String) {
  updateScope(id: $id, title: $title, description: $description, niceToHave: $niceToHave color: $color) {
    ...ScopeFragment
  }
}

mutation DeleteScope($id: ID!) {
  deleteScopeById(id: $id) {
    id
  }
}

mutation UpdateScopePosition($id: ID!, $targetIndex: Int!) {
  updateScopePosition(id: $id, targetIndex: $targetIndex) {
    ...ScopeFragment
  }
}

mutation UpdateScopeProgress($id: ID!, $progress: Float) {
  updateScope(id: $id, progress: $progress) {
    id
    title
    description
    progress
    createdAt
    updatedAt
  }
}

mutation UpdateScopeProgresses($inputs: [BatchUpdateScopeProgressMap!]!) {
  batchUpdateScopeProgress(inputs: $inputs) {
    ...ScopeFragment
  }
}
